{-
  Implement Curve25519 addition and multiplication.
-}

;; Curve25519 paper: https://cr.yp.to/ecdh/curve25519-20060209.pdf
;; (but don't use it if you know nothing about Curve25519 - try to start with something like Wikipedia)

;; This paper was suggested in chat to learn Curve25519, but I almost didn't use it
;; https://www.cl.cam.ac.uk/teaching/2122/Crypto/curve25519.pdf

;; General Montgomery curve: B * y^2 = x^3 + A * x^2 + x
;; Curve25519: y^2 = x^3 + 486662 * x^2 + x
const A = 486662;
const p = (1 << 255) - 19;   ;; 2^255 - 19

;; =============== Field arithmetic functions =============================
;; todo optimization: check gas usage for inline_ref
;; (int, int) muldivmod(int a, int b, int s) inline asm "MULDIVMOD";

(int) add_(int a, int b) inline {
    return (a + b) % p;
}

(int) sub_(int a, int b) inline {
    return (a - b) % p;
}

(int) mul_(int a, int b) inline {
    return (a * b) % p;
}

(int) exp_(int a, int b) inline {
    int bit = 1 << 255;
    int exp = 1;
    while (bit > 0) {
        int bit_one = bit & b;  ;; current bit is 1
        if ((exp != 1) | bit_one) {     ;; todo optimization: check without skipping
            exp = mul_(exp, exp);
            if (bit_one) {
                exp = mul_(exp, a);
            }
        }
        bit >>= 1;
    }
    return exp;
}

;; =============== Field arithmetic functions: div_ =============================
{-
  Code from here: https://ru.wikipedia.org/wiki/Расширенный_алгоритм_Евклида#Псевдокод
  or here: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Pseudocode

  function extended_gcd(a, b)
      (old_r, r) := (a, b)
      (old_s, s) := (1, 0)
      (old_t, t) := (0, 1)

      while r ≠ 0 do
          quotient := old_r div r
          (old_r, r) := (r, old_r − quotient × r)
          (old_s, s) := (s, old_s − quotient × s)
          (old_t, t) := (t, old_t − quotient × t)

      output "Bézout coefficients:", (old_s, old_t)
      output "greatest common divisor:", old_r
      output "quotients by the gcd:", (t, s)
-}
(int, int) extended_gcd(a, b) inline {
    (int old_r, int r) = (a, b);
    (int old_s, int s) = (1, 0);
    (int old_t, int t) = (0, 1);
    while (r != 0) {
        ;; todo: use muldivmod here?
        int quotient = old_r / r;
        (old_r, r) = (r, old_r - quotient * r);
        (old_s, s) = (s, old_s - quotient * s);
        (old_t, t) = (t, old_t - quotient * t);
    }
    return (old_s, old_t);
}

{-
  a / b = a * 1/b;
  Let's find 1/b using Bézout's identity: a * s + b * t = gcd(a, b)
  Use gcd(b, p) and get the s = 1/b in field defined by prime p. (b * s + p * t = gcd(b, p) => b * s + 0 = 1 => s = 1/b)
-}
(int) div_(int a, int b) {
    (int s, int t) = extended_gcd(b, p);
    return mul_(a, s);
}

;; =============== Montgomery curve addition and doubling =============================
{-
  Formulas for addition and doubling: https://en.wikipedia.org/wiki/Montgomery_curve#Addition
-}

(int) lambda_distinct(int x1, int y1, int x2, int y2) inline {
    ;; (y2 - y1) / (x2 - x1)
    return div_(sub_(y2, y1), sub_(x2, x1));
}

(int) lambda_coincident(int x, int y) inline {
    ;; (3 * x^2 + 2 * A * x + 1) / (2 * y)
    return div_(add_(add_(mul_(3, mul_(x, x)), mul_(2, mul_(A, x))), 1), mul_(2, y));
}

;; testable
(int, int) add(int x1, int y1, int x2, int y2) {
    ;; return x, y coordinate of Point1 + Point2

    int l = 0;
    ;; addition result is only finite valid point on the curve, so no need to check ((x1 == x2) & (y1 == -y2))
    if ((x1 == x2) & (y1 == y2)) {
        l = lambda_coincident(x1, y1);
    } else {
        l = lambda_distinct(x1, y1, x2, y2);
    }

    ;; x3 = l^2 - A - x1 - x2;
    ;; y3 = l * (2 * x1 + x2 + A) - l^3 - y1;
    int x3 = sub_(sub_(sub_(mul_(l, l), A), x1), x2);
    int y3 = sub_(sub_(mul_(l, add_(mul_(2, x1), add_(x2, A))), mul_(mul_(l, l), l)), y1);
    return (x3, y3);
}

;; testable
(int) mul(int x1, int factor) {
    ;; return x coordinate of Point1 * factor
    ;; Algorithm from here:
    ;; https://mailarchive.ietf.org/arch/msg/cfrg/pt2bt3fGQbNF8qdEcorp-rJSJrc/
    ;;    x2,z2,x3,z3 = 1,0,x1,1
    ;;    for i in reversed(range(255)):
    ;;      bit = 1 & (n >> i)
    ;;      x2,x3 = cswap(x2,x3,bit)
    ;;      z2,z3 = cswap(z2,z3,bit)
    ;;      x3,z3 = ((x2*x3-z2*z3)^2,x1*(x2*z3-z2*x3)^2)
    ;;      x2,z2 = ((x2^2-z2^2)^2,4*x2*z2*(x2^2+A*x2*z2+z2^2))
    ;;      x2,x3 = cswap(x2,x3,bit)
    ;;      z2,z3 = cswap(z2,z3,bit)
    ;;    return x2*z2^(p-2)

;;     (int x2, int z2, int x3, int z3) = (1, 0, x1, 1);
;;     (int x3, z3) = (0, 0);
;;     int bits_factor = 255;
;;     while (bits_factor >= 0) {
;;         int bit = 1 & (factor >> bits_factor);
;;         if (bit) {
;;
;;         } else {
;;
;;         }
;;     }
    return 0;
}

;; =============== recv_internal =============================
() recv_internal () { }
