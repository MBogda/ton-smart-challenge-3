const int KEY_LEN = 256;

forall X -> X tuple_index(tuple t, int index) asm "INDEXVAR";

(tuple) util_addresses() {
    tuple result = empty_tuple();
    result = result.tpush("Ef8RERERERERERERERERERERERERERERERERERERERERERlb"a);
    result = result.tpush("Ef8iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiImKK"a);
    result = result.tpush("Ef8zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM0vF"a);
    result = result.tpush("Ef9ERERERERERERERERERERERERERERERERERERERERERJUo"a);
    result = result.tpush("Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"a);
    result = result.tpush("Ef8REREREREREREREREREREREREREREREREREREREREREik4"a);
    result = result.tpush("Ef8iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIVLp"a);
    result = result.tpush("Ef8zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMWuH"a);
    result = result.tpush("Ef9EREREREREREREREREREREREREREREREREREREREREQcWN"a);
    result = result.tpush("Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUfzj"a);

    return result;
}

(slice) get_address(int addr_num) {
    {- Get up to 1024 different addresses -}
    builder address_bl = begin_cell()
            .store_uint(0x4ff, 11)  ;; first 3 + 8 bit
            .store_uint(0x3f, 6);      ;; last 256 bit
    repeat (25) {
        address_bl = address_bl.store_uint(addr_num, 10);
    }
    return address_bl.end_cell().begin_parse();
}

_ __test_get_address() {
    slice address = get_address(0);
    slice address_literal = "Ef_8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJeo"a;
    throw_if(100, address.slice_hash() != address_literal.slice_hash());

    slice address = get_address(1);
    slice address_literal = "Ef_8AQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEATMp"a;
    throw_if(101, address.slice_hash() != address_literal.slice_hash());

    slice address = get_address(0x3ff);
    slice address_literal = "Ef___________________________________________7Sg"a;
    throw_if(101, address.slice_hash() != address_literal.slice_hash());
}

(cell, cell) get_participate_dicts(int expected_participants) {
    slice storage_sl = get_data().begin_parse();
    throw_if(120, expected_participants != storage_sl~load_uint(8));
    cell addr2stake = storage_sl~load_ref();
    cell stake2info = storage_sl~load_ref();
    return (addr2stake, stake2info);
}

_ check_addr2stake(cell addr2stake, slice address, int stake) impure {
    (slice actual_stake_sl, int success) = addr2stake.udict_get?(KEY_LEN, address.slice_hash());
    throw_unless(100, success);
    int actual_stake = actual_stake_sl~load_uint(18);
    throw_if(101, actual_stake != stake);
}

_ check_stake2info(cell stake2info, slice address, int stake, int max_factor) impure {
    (slice actual_info_sl, int success) = stake2info.udict_get?(KEY_LEN, stake_and_hash(stake, address.slice_hash()));
    throw_unless(110, success);
    int actual_max_factor = actual_info_sl~load_uint(24);
    throw_if(111, actual_max_factor != max_factor);
    slice actual_address = actual_info_sl~load_bits(actual_info_sl.slice_bits());
    throw_if(112, address.slice_hash() != actual_address.slice_hash());
}

_ __test_participate() {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 0]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);
}

_ __test_participate2() impure {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 5, 655360000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(2);

    ;; address 0
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);

    ;; address 1
    addr2stake.check_addr2stake(addresses.tuple_index(1), 5);
    stake2info.check_stake2info(addresses.tuple_index(1), 5, 655360);
}

_ __test_participate3() {
    tuple addresses = util_addresses();
    ;; first invoke
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);

    ;; second invoke
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 5, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 20);
    stake2info.check_stake2info(addresses.tuple_index(0), 20, 66000);
}

_ __test_participate_two_zero_stakes() {
    tuple addresses = util_addresses();
    ;; address 0
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 0, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 0);
    stake2info.check_stake2info(addresses.tuple_index(0), 0, 65536);

    ;; address 1
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 0, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(2);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 0);
    stake2info.check_stake2info(addresses.tuple_index(0), 0, 65536);
    addr2stake.check_addr2stake(addresses.tuple_index(1), 0);
    stake2info.check_stake2info(addresses.tuple_index(1), 0, 66000);
}

_ __test_participate_two_max_stakes() {
    tuple addresses = util_addresses();
    ;; address 0
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 65535, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 65535);
    stake2info.check_stake2info(addresses.tuple_index(0), 65535, 65536);

    ;; address 1
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 65535, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(2);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 65535);
    stake2info.check_stake2info(addresses.tuple_index(0), 65535, 65536);
    addr2stake.check_addr2stake(addresses.tuple_index(1), 65535);
    stake2info.check_stake2info(addresses.tuple_index(1), 65535, 66000);
}

_ __test_participate_two_max_stakes_in_one() {
    tuple addresses = util_addresses();
    ;; address 0
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 65535, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 65535);
    stake2info.check_stake2info(addresses.tuple_index(0), 65535, 65536);

    ;; address 1
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 65535, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 131070);
    stake2info.check_stake2info(addresses.tuple_index(0), 131070, 66000);
}

_ __test_participate_two_more_than_max_stake() {
    tuple addresses = util_addresses();
    ;; address 0
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 131072, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 131072);
    stake2info.check_stake2info(addresses.tuple_index(0), 131072, 65536);

    ;; address 1
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 196607, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(2);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 131072);
    stake2info.check_stake2info(addresses.tuple_index(0), 131072, 65536);
    addr2stake.check_addr2stake(addresses.tuple_index(1), 196607);
    stake2info.check_stake2info(addresses.tuple_index(1), 196607, 66000);
}

_ __test_participate_260_queries() {
    tuple addresses = util_addresses();
    int idx = 0;
    repeat (26) {
        int idx2 = 0;
        repeat (10) {
            int max_factor = 70000 + idx2 * 100 + idx;
            var (_, _) = invoke_method(participate, [addresses.tuple_index(idx2), idx2 + 1, max_factor]);
            idx2 += 1;
        }

        (cell addr2stake, cell stake2info) = get_participate_dicts(10);
        int idx2 = 0;
        repeat (10) {
            int stake = (idx2 + 1) * (idx + 1);
            int max_factor = 70000 + idx2 * 100 + idx;
            addr2stake.check_addr2stake(addresses.tuple_index(idx2), stake);
            stake2info.check_stake2info(addresses.tuple_index(idx2), stake, max_factor);
            idx2 += 1;
        }
        idx += 1;
    }
}

_ __test_participate_260_queries_max_stake() {
    tuple addresses = util_addresses();
    int idx = 0;
    repeat (26) {
        int idx2 = 0;
        repeat (10) {
            int max_factor = 70000 + idx2 * 100 + idx;
            var (_, _) = invoke_method(participate, [addresses.tuple_index(idx2), 6553, max_factor]);
            idx2 += 1;
        }

        (cell addr2stake, cell stake2info) = get_participate_dicts(10);
        int idx2 = 0;
        repeat (10) {
            int stake = 6553 * (idx + 1);
            int max_factor = 70000 + idx2 * 100 + idx;
            addr2stake.check_addr2stake(addresses.tuple_index(idx2), stake);
            stake2info.check_stake2info(addresses.tuple_index(idx2), stake, max_factor);
            idx2 += 1;
        }
        idx += 1;
    }
}

_ __test_participate_255_addresses() {
    ;; 256 addresses fails because we store participants as uint8.
    int idx = 0;
    repeat (255) {
        slice address = get_address(idx);
        int stake = idx * 10;
        int max_factor = 70000 + idx * 10;
        var (_, _) = invoke_method(participate, [address, stake, max_factor]);

        (cell addr2stake, cell stake2info) = get_participate_dicts(idx + 1);
        addr2stake.check_addr2stake(address, stake);
        stake2info.check_stake2info(address, stake, max_factor);

        idx += 1;
    }
}

_ __test_try_elect() {
    __test_participate2();
    _ = invoke_method_expect_fail(try_elect, []);
}

_ __test_try_elect2() impure {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 10100, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 9090, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(2), 1010, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(3), 500, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(4), 2, 0]);

    var (_, stack) = invoke_method(try_elect, []);
    [int total_winners, int total_effective_stake, int unused_stake] = stack;
    throw_if(100, total_winners != 5);
    throw_if(101, total_effective_stake != 10);
    throw_if(102, unused_stake != 20692);
}

_ __test_try_elect3() impure {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 25, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 60, 0]);     ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(2), 95, 0]);     ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(3), 47, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(4), 100, 0]);    ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(5), 74, 0]);     ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(6), 83, 0]);     ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(7), 95, 0]);     ;; win 60
    var (_, _) = invoke_method(participate, [addresses.tuple_index(8), 13, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(9), 60, 0]);     ;; win 60

    var (_, stack) = invoke_method(try_elect, []);
    [int total_winners, int total_effective_stake, int unused_stake] = stack;
    throw_if(100, total_winners != 7);
    throw_if(101, total_effective_stake != 420);
    throw_if(102, unused_stake != 232);
}

_ __test_get_stake_table() {
    tuple addresses = util_addresses();
    __test_try_elect2();

    var (_, stack) = invoke_method(get_stake_table, []);
    [tuple winners, tuple losers] = stack;

    ;; winners
    int idx = 0;
    repeat (5) {
        [slice address, int stake] = winners.tuple_index(idx);
        int idx2 = 0;
        int hash = address.slice_hash();
        int any = false;
        repeat (5) {
            int expected_hash = addresses.tuple_index(idx2).slice_hash();
            if (hash == expected_hash) {
                any = true;
                if (idx2 == 0) {
                    throw_if(100, stake != 2);
                } else {
                    if (idx2 == 1) {
                        throw_if(101, stake != 2);
                    } else {
                        if (idx2 == 2) {
                            throw_if(102, stake != 2);
                        } else {
                            if (idx2 == 3) {
                                throw_if(103, stake != 2);
                            } else {
                                if (idx2 == 4) {
                                    throw_if(104, stake != 2);
                                } else {
                                    throw(105);
                                }
                            }
                        }
                    }
                }
            }
            idx2 += 1;
        }
        throw_unless(110, any);

        idx += 1;
    }

    ;; losers
    int idx = 0;
    repeat (4) {
        [slice address, int stake] = losers.tuple_index(idx);
        int idx2 = 0;
        int hash = address.slice_hash();
        int any = false;
        repeat (4) {
            int expected_hash = addresses.tuple_index(idx2).slice_hash();
            if (hash == expected_hash) {
                any = true;
                if (idx2 == 0) {
                    throw_if(200, stake != 10098);
                } else {
                    if (idx2 == 1) {
                        throw_if(201, stake != 9088);
                    } else {
                        if (idx2 == 2) {
                            throw_if(202, stake != 1008);
                        } else {
                            if (idx2 == 3) {
                                throw_if(203, stake != 498);
                            } else {
                                throw(205);
                            }
                        }
                    }
                }
            }
            idx2 += 1;
        }
        throw_unless(210, any);

        idx += 1;
    }
}

_ __test_get_stake_table2() {
    tuple addresses = util_addresses();
    __test_try_elect3();

    var (_, stack) = invoke_method(get_stake_table, []);
    [tuple winners, tuple losers] = stack;

    ;; winners
    int idx = 0;
    repeat (7) {
        [slice address, int stake] = winners.tuple_index(idx);
        int idx2 = 0;
        int hash = address.slice_hash();
        int any = false;
        repeat (10) {
            int expected_hash = addresses.tuple_index(idx2).slice_hash();
            if (hash == expected_hash) {
                any = true;
                if (idx2 == 1) {
                    throw_if(101, stake != 60);
                } else {
                    if (idx2 == 2) {
                        throw_if(102, stake != 60);
                    } else {
                        if (idx2 == 4) {
                            throw_if(104, stake != 60);
                        } else {
                            if (idx2 == 5) {
                                throw_if(105, stake != 60);
                            } else {
                                if (idx2 == 6) {
                                    throw_if(106, stake != 60);
                                } else {
                                    if (idx2 == 7) {
                                        throw_if(107, stake != 60);
                                    } else {
                                        if (idx2 == 9) {
                                            throw_if(109, stake != 60);
                                        } else {
                                            throw(110);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            idx2 += 1;
        }
        throw_unless(120, any);

        idx += 1;
    }

    ;; losers
    int idx = 0;
    repeat (8) {
        [slice address, int stake] = losers.tuple_index(idx);
        int idx2 = 0;
        int hash = address.slice_hash();
        int any = false;
        repeat (10) {
            int expected_hash = addresses.tuple_index(idx2).slice_hash();
            if (hash == expected_hash) {
                any = true;
                if (idx2 == 0) {
                    throw_if(200, stake != 25);
                } else {
                    if (idx2 == 2) {
                        throw_if(202, stake != 35);
                    } else {
                        if (idx2 == 3) {
                            throw_if(203, stake != 47);
                        } else {
                            if (idx2 == 4) {
                                throw_if(204, stake != 40);
                            } else {
                                if (idx2 == 5) {
                                    throw_if(205, stake != 14);
                                } else {
                                    if (idx2 == 6) {
                                        throw_if(206, stake != 23);
                                    } else {
                                        if (idx2 == 7) {
                                            throw_if(207, stake != 35);
                                        } else {
                                            if (idx2 == 8) {
                                                throw_if(208, stake != 13);
                                            } else {
                                                throw(210);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            idx2 += 1;
        }
        throw_unless(220, any);

        idx += 1;
    }
}
