const int KEY_LEN = 256;

forall X -> X tuple_index(tuple t, int index) asm "INDEXVAR";

(tuple) util_addresses() {
    tuple result = empty_tuple();
    result = result.tpush("Ef8RERERERERERERERERERERERERERERERERERERERERERlb"a);
    result = result.tpush("Ef8iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiImKK"a);
    result = result.tpush("Ef8zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM0vF"a);
    result = result.tpush("Ef9ERERERERERERERERERERERERERERERERERERERERERJUo"a);
    result = result.tpush("Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"a);

    return result;
}

(cell, cell) get_participate_dicts(int expected_participants) {
    slice storage_sl = get_data().begin_parse();
    throw_if(120, expected_participants != storage_sl~load_uint(8));
    cell addr2stake = storage_sl~load_ref();
    cell stake2info = storage_sl~load_ref();
    return (addr2stake, stake2info);
}

_ check_addr2stake(cell addr2stake, slice address, int stake) impure {
    (slice actual_stake_sl, int success) = addr2stake.udict_get?(KEY_LEN, address.slice_hash());
    throw_unless(100, success);
    int actual_stake = actual_stake_sl~load_uint(16);
    throw_if(101, actual_stake != stake);
}

_ check_stake2info(cell stake2info, slice address, int stake, int max_factor) impure {
    (slice actual_info_sl, int success) = stake2info.udict_get?(KEY_LEN, stake_and_hash(stake, address.slice_hash()));
    throw_unless(110, success);
    int actual_max_factor = actual_info_sl~load_uint(24);
    throw_if(111, actual_max_factor != max_factor);
    slice actual_address = actual_info_sl~load_bits(actual_info_sl.slice_bits());
    throw_if(112, address.slice_hash() != actual_address.slice_hash());
}

_ __test_participate() {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 0]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);
}

_ __test_participate2() {
    tuple addresses = util_addresses();
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 0]);
    var (_, _) = invoke_method(participate, [addresses.tuple_index(1), 5, 655360000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(2);

    ;; address 0
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);

    ;; address 1
    addr2stake.check_addr2stake(addresses.tuple_index(1), 5);
    stake2info.check_stake2info(addresses.tuple_index(1), 5, 655360);
}

_ __test_participate3() {
    tuple addresses = util_addresses();
    ;; first invoke
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 15, 65536]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 15);
    stake2info.check_stake2info(addresses.tuple_index(0), 15, 65536);

    ;; second invoke
    var (_, _) = invoke_method(participate, [addresses.tuple_index(0), 5, 66000]);
    (cell addr2stake, cell stake2info) = get_participate_dicts(1);
    addr2stake.check_addr2stake(addresses.tuple_index(0), 20);
    stake2info.check_stake2info(addresses.tuple_index(0), 20, 66000);
}
