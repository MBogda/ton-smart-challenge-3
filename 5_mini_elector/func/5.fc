{-
  Validators in TON network are chosen onchain by special smart-contract called Elector:
  participants sends their application and smart-contract deterministically decides who will be the next validator.
  Your task is to implement (in simplified form) election logic in the gas-optimal way:
  "Mini-elector" should accept internal messages with the following layout.
    a) `participate#5ce28eea query_id:uint64 max_factor:uint24 = InternalMsgBody;`.
       Upon receiving this message contract should store sender of the message (called key), max_factor and
       amount of TON attached to message (called stake) to storage (if key already exists in the table
       max_factor should be rewritten to new one while amount should be added to previously processed).
       If maxfactor is less than 65536 it should be treated as equal to 65536, if maxfactor is higher than 655360
       it should be treated as equal to 655360.
    b) `try_elect#207fa5f5 query_id:uint64 = InternalMsgBody;` - upon receiving this message contract should try
       to form winners list (key, effective_stake) from participant' applications. Note that `effective_stake`
       may be less than `stake` (in other words, not all the stake will work). Excesses of the stake (as well as
       stakes of "losers", should be stored separately).
    Rules of forming a list:
      I) it has at least 5 rows
      II) for each participant A in the list, the ratio of A's `effective_stake` to the `effective_stake` of
      participant with the smallest stake `effective_stake` should be equal or less to A's max_factor/65536
      (in other words, max_factor is 65536 based rational number).
      III) Under conditions I and II, total effective stake (sum of `effective_stake` of all winners) should be maximal.

    If it is not possible to form a list, contract should throw. Otherwise, it should respond with
    `success#eefa5ea4 query_id:uint64 total_winners:uint32 total_effective_stake:(VarUInteger 16)
    unused_stake:(VarUInteger 16) = InternalMsgBody;` (query_id matched that in try_elect)

    After responding with `success` message, contract's get_method `get_stake_table` should return two tuples with
    winners and "unused funds", this tuples should contain exactly the same number of elements as there are
    winners/participants-with-unused-funds (NOT lisp-style lists), each element should be in format
    [address-as-a-slice, stake-as-number].  Note that if participants' stake is not fully used, it will be presented
    in both tuples. For instance, possible result of get_stake_table can be
    `(["Ef8RERERERERERERERERERERERERERERERERERERERERERlb"a, 10], ["Ef8iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiImKK"a, 1],
    ["Ef8zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM0vF"a, 1], ["Ef9ERERERERERERERERERERERERERERERERERERERERERJUo"a, 1],
    ["Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"a, 1]), (["Ef8RERERERERERERERERERERERERERERERERERERERERERlb"a, 10])`.

    Note that tests are organized as following: there will be a few participate requests (less than 255) followed
    by one try_elect and then response and get_method result will be checked.
-}

const int KEY_LEN = 256;
const int STAKE_KEY_LEN = 16;
const int MAX_FACTOR_KEY_LEN = 24;
const int STAKE_KEY_SUFFIX = KEY_LEN - STAKE_KEY_LEN;   ;; 240
const int MIN_MAX_FACTOR = 65536;
const int MAX_MAX_FACTOR = 655360;

;; =============== extract_address =============================

(slice) extract_address(cell full_message) inline {
    slice address = full_message.begin_parse();
    address~load_uint(4);
    (_, address) = address.load_msg_addr();
    return address;
}

;; =============== participate =============================

(slice) stake_to_slice(int stake) inline {
    return begin_cell().store_uint(stake, STAKE_KEY_LEN).end_cell().begin_parse();
}

(slice) info_to_slice(int max_factor, slice address) inline {
    return begin_cell().store_uint(max_factor, MAX_FACTOR_KEY_LEN).store_slice(address).end_cell().begin_parse();
}

(int) stake_and_hash(int stake, int hash) inline {
    stake <<= STAKE_KEY_SUFFIX;
    hash >>= STAKE_KEY_LEN;
    return stake + hash;
}

(cell, cell, int) get_participants() inline {
    slice storage_sl = get_data().begin_parse();
    (cell addr2stake, cell stake2info, int participants) = (null(), null(), 0);
    ifnot (storage_sl.slice_empty?()) {
        (addr2stake, stake2info) = (storage_sl~load_ref(), storage_sl~load_ref());
        participants += storage_sl~load_uint(8);
    }
    return (addr2stake, stake2info, participants);
}

() participate(slice address, int stake, int max_factor) impure inline {
    {-
      addr2stake: hash(address) -> stake
      stake2info: stake + hash(address)[:240] -> address, max_factor
    -}
    if (max_factor < MIN_MAX_FACTOR) {
        max_factor = MIN_MAX_FACTOR;
    } else {
        if (max_factor > MAX_MAX_FACTOR) {
            max_factor = MAX_MAX_FACTOR;
        }
    }
    (cell addr2stake, cell stake2info, int participants) = get_participants();
    ;; store addr2stake
    int addr_hash = address.slice_hash();
    (slice old_stake_sl, int success) = addr2stake.udict_get?(KEY_LEN, addr_hash);
    if (success) {
        int old_stake = old_stake_sl~load_uint(STAKE_KEY_LEN);
        stake += old_stake;
        stake2info~udict_delete?(KEY_LEN, stake_and_hash(old_stake, addr_hash));
    } else {
        participants += 1;
    }
    addr2stake~udict_set(KEY_LEN, addr_hash, stake_to_slice(stake));
    ;; store stake2info
    stake2info~udict_set(KEY_LEN, stake_and_hash(stake, addr_hash), info_to_slice(max_factor, address));
    begin_cell().store_ref(addr2stake).store_ref(stake2info).store_uint(participants, 8).end_cell().set_data();
}

;; =============== try_elect =============================

() store_winners_losers(tuple max_stakes, tuple unused_stakes) impure inline {
    {-
      cell-list of winners, cell-list of unused. 3 items per cell.
    -}
    builder winners = begin_cell();
    int cur_winners = 0;
    builder losers = begin_cell();
    int cur_losers = 0;
    ;; todo optimization: replace with `repeat`
    while (~ unused_stakes.null?()) {
        [int stake, slice address] = unused_stakes~list_next();
        if (cur_losers == 3) {
            cur_losers = 0;
            losers = begin_cell().store_ref(losers.end_cell());
        }
        losers = losers.store_uint(stake, STAKE_KEY_LEN).store_slice(address);
        cur_losers += 1;
    }
    while (~ max_stakes.null?()) {
        [int stake, int effective_stake, int max_factor, slice address] = max_stakes~list_next();
        if (stake > effective_stake) {
            if (cur_losers == 3) {
                cur_losers = 0;
                losers = begin_cell().store_ref(losers.end_cell());
            }
            losers = losers.store_uint(stake - effective_stake, STAKE_KEY_LEN).store_slice(address);
            cur_losers += 1;
        }

        if (cur_winners == 3) {
            cur_winners = 0;
            winners = begin_cell().store_ref(winners.end_cell());
        }
        winners = winners.store_uint(effective_stake, STAKE_KEY_LEN).store_slice(address);
        cur_winners += 1;
    }

    begin_cell().store_ref(winners.end_cell()).store_ref(losers.end_cell()).end_cell().set_data();
}

(int, int, int) try_elect() impure inline {
    (_, cell stake2info, int participants) = get_participants();
    throw_if(90, participants < 5);

    tuple last_stakes = null();
    int last_winners = 0;
    int all_stakes = 0;
    tuple max_stakes = null();
    tuple unused_stakes = null();
    int max_effective_stakes = 0;
    int max_winners = 0;
;;     while (~ stake2info.dict_empty?()) {    ;; todo optimization: check that repeat is cheaper
    repeat (participants) {
        (int index, slice info, int success) = stake2info~udict::delete_get_max(KEY_LEN);
        int max_factor = info~load_uint(MAX_FACTOR_KEY_LEN);
        int min_stake = index >> STAKE_KEY_SUFFIX;
        all_stakes += min_stake;

        tuple new_stakes = cons([min_stake, min_stake, max_factor, info], null());
        unused_stakes = cons([min_stake, info], unused_stakes);
        int new_effective_stakes = min_stake;
        ;; go through all_stakes and update effective stakes
        ;; todo optimization: replace with `repeat`
        while (~ last_stakes.null?()) {
            [int stake, int effective_stake, max_factor, info] = last_stakes~list_next();
            int max_effective_stake = (max_factor * min_stake) / MIN_MAX_FACTOR;
            effective_stake = min(effective_stake, max_effective_stake);    ;; todo? optimization: use if
            new_stakes = cons([stake, effective_stake, max_factor, info], new_stakes);
            new_effective_stakes += effective_stake;
        }

        last_winners += 1;
        if ((new_effective_stakes > max_effective_stakes) & (last_winners >= 5)) {  ;; todo? maybe >=
            max_stakes = new_stakes;
            unused_stakes = null();
            max_effective_stakes = new_effective_stakes;
            max_winners = last_winners;
        }
        last_stakes = new_stakes;
    }

    store_winners_losers(max_stakes, unused_stakes);
    return (max_winners, max_effective_stakes, all_stakes - max_effective_stakes);
}

;; =============== send_message =============================

() send_message(slice address, int coins, int query_id,
        int total_winners, int total_effective_stake, int unused_stake) impure inline {
    cell output_message = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(address)
            .store_coins(coins)
            .store_uint(0, 107)
            ;; message body
            .store_uint(0xeefa5ea4, 32)
            .store_uint(query_id, 64)
            .store_uint(total_winners, 32)
            .store_uint(total_effective_stake, STAKE_KEY_LEN)
            .store_uint(unused_stake, STAKE_KEY_LEN)
            .end_cell();

    send_raw_message(output_message, 64);
}

;; =============== recv_internal =============================

;; testable
() recv_internal(int msg_value, cell full_message, slice in_msg_body) {
    int op = in_msg_body~load_uint(32);
    if (op == 0x5ce28eea) {
        ;; throw query_id
        in_msg_body~load_uint(64);
        participate(extract_address(full_message), msg_value, in_msg_body~load_uint(MAX_FACTOR_KEY_LEN));
    }
    if (op == 0x207fa5f5) {
        int query_id = in_msg_body~load_uint(64);
        (int total_winners, int total_effective_stake, int unused_stake) = try_elect();
        send_message(extract_address(full_message), msg_value, query_id, total_winners, total_effective_stake, unused_stake);
    }
}

;; =============== get_stake_table =============================

;; testable
(tuple, tuple) get_stake_table() method_id {
    return (tpush(empty_tuple(), 0), tpush(empty_tuple(), 0));
}
