(cell) create_input_message(int score, int value, int internal_value) {
    return begin_cell()
            .store_uint(score, 32)
            .store_coins(value)
            .store_ref(begin_cell().store_int(internal_value, 17).end_cell())
            .end_cell();
}

(int, int) parse_one_output_message(slice messages, int value, int internal_value) impure {
    ;; todo: understand, how is it stored.
    messages~load_ref();
    slice first_msg = messages~load_ref().begin_parse();

    first_msg~load_uint(6);
    first_msg~load_msg_addr();
    int actual_value = first_msg~load_coins();
    first_msg~load_uint(107);
    slice msg = first_msg~load_bits(17);
    int actual_internal_value = msg~load_int(17);

    throw_if(1000, actual_value != value);
    throw_if(1001, actual_internal_value != internal_value);
    return (actual_value, actual_internal_value);
}

(int, int, int, int) parse_two_output_messages(
        slice messages, int value1, int internal_value1, int value2, int internal_value2) impure {
    ;; todo: understand, how is it stored.
    messages~load_ref();
    slice first_msg = messages~load_ref().begin_parse();

    first_msg~load_uint(6);
    first_msg~load_msg_addr();
    int actual_value1 = first_msg~load_coins();
    first_msg~load_uint(107);
    slice msg = first_msg~load_bits(17);
    int actual_internal_value1 = msg~load_int(17);

    throw_if(1000, actual_value1 != value1);
    throw_if(1001, actual_internal_value1 != internal_value1);

    slice second_msg = messages~load_ref().begin_parse();

    second_msg~load_uint(6);
    second_msg~load_msg_addr();
    int actual_value2 = second_msg~load_coins();
    second_msg~load_uint(107);
    slice msg = second_msg~load_bits(17);
    int actual_internal_value2 = msg~load_int(17);

    throw_if(1000, actual_value2 != value2);
    throw_if(1001, actual_internal_value2 != internal_value2);

    return (actual_value1, actual_internal_value1, actual_value2, actual_internal_value2);
}

_ __test_one_message() {
    ;; Given: empty state
    set_data(begin_cell().end_cell());
    ;; some message
    cell message = create_input_message(5, 10, -1);

    ;; When: recv_internal
    var (int gas_used, _) = invoke_method(recv_internal, [message.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(101, number != 1);

    int score = sl~load_uint(32);
    throw_if(102, score != 5);

    int value = sl~load_coins();
    throw_if(103, value != 10);

    int refs = sl.slice_refs();
    throw_if(104, refs != 1);

    slice msg = sl~load_ref().begin_parse();
    throw_if(105, msg.slice_empty?());

    return [gas_used, msg];
}

_ __test_two_messages() {
    ;; Given: empty state
    set_data(begin_cell().end_cell());
    ;; two messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);

    ;; When: recv_internal two times
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(110, number != 2);

    int score = sl~load_uint(32);
    throw_if(111, score != 1);
    int value = sl~load_coins();
    throw_if(112, value != 12);

    int score = sl~load_uint(32);
    throw_if(121, score != 2);
    int value = sl~load_coins();
    throw_if(122, value != 11);

    throw_unless(150, sl.slice_data_empty?());

    int refs = sl.slice_refs();
    throw_if(130, refs != 2);

    slice msg1 = sl~load_ref().begin_parse();
    throw_if(141, msg1.slice_empty?());
    slice msg2 = sl~load_ref().begin_parse();
    throw_if(142, msg2.slice_empty?());

    return [msg1, msg2];
}

_ __test_five_messages() {
    ;; Given: empty state
    set_data(begin_cell().end_cell());
    ;; four messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);
    cell message3 = create_input_message(3, 10, -3);
    cell message4 = create_input_message(4, 9, -4);
    cell message5 = create_input_message(5, 8, -5);

    ;; When: recv_internal two times
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(110, number != 5);

    int score = sl~load_uint(32);
    throw_if(111, score != 5);
    int value = sl~load_coins();
    throw_if(112, value != 8);

    slice n1 = sl~load_ref().begin_parse();
    slice msg5 = sl~load_ref().begin_parse();
    throw_unless(113, sl.slice_empty?());
    throw_if(114, msg5.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(121, score != 1);
    int value = n1~load_coins();
    throw_if(122, value != 12);
    slice msg1 = n1~load_ref().begin_parse();
    throw_if(123, msg1.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(131, score != 2);
    int value = n1~load_coins();
    throw_if(132, value != 11);
    slice msg2 = n1~load_ref().begin_parse();
    throw_if(133, msg2.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(141, score != 3);
    int value = n1~load_coins();
    throw_if(142, value != 10);
    slice msg3 = n1~load_ref().begin_parse();
    throw_if(143, msg3.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(151, score != 4);
    int value = n1~load_coins();
    throw_if(152, value != 9);
    slice msg4 = n1~load_ref().begin_parse();
    throw_if(153, msg4.slice_empty?());

    throw_unless(200, n1.slice_data_empty?());

    return [msg1, msg2, msg3, msg4, msg5];
}

_ __test_twelve_messages_one_output() {
    ;; Given: empty state
    set_data(begin_cell().end_cell());
    ;; messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);
    cell message3 = create_input_message(3, 10, -3);
    cell message4 = create_input_message(4, 9, -4);
    cell message5 = create_input_message(5, 8, -5);
    cell message6 = create_input_message(6, 7, -6);
    cell message7 = create_input_message(7, 6, -7);
    cell message8 = create_input_message(8, 5, -8);
    cell message9 = create_input_message(9, 4, -9);
    cell message10 = create_input_message(10, 3, -10);
    cell message11 = create_input_message(11, 2, -11);
    cell message12 = create_input_message(12, 1, -12);

    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out12 = get_actions();
    (int, int) actual = parse_one_output_message(out12, 1, -12);

    return [actual];
}

_ __test_twelve_messages_two_outputs() {
    ;; Given: empty state
    set_data(begin_cell().end_cell());
    ;; messages
    cell message1 = create_input_message(1, 1, -1);
    cell message2 = create_input_message(2, 2, -2);
    cell message3 = create_input_message(3, 3, -3);
    cell message4 = create_input_message(4, 4, -4);
    cell message5 = create_input_message(5, 5, -5);
    cell message6 = create_input_message(6, 6, -6);
    cell message7 = create_input_message(7, 7, -7);
    cell message8 = create_input_message(8, 8, -8);
    cell message9 = create_input_message(9, 9, -9);
    cell message10 = create_input_message(10, 10, -10);
    cell message11 = create_input_message(11, 11, -11);
    cell message12 = create_input_message(12, 12, -12);

    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out12 = get_actions();
    (int, int) actual = parse_one_output_message(out12, 1, -1); ;; only last (e.g. second) message is achiavable :(
;;     (int, int, int, int) actual = parse_two_output_messages(out12, 12, -12, 1, -1);

    return [actual];
}
