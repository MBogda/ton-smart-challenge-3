(cell) create_input_message(int score, int value, int internal_value) {
    return begin_cell()
            .store_uint(score, 32)
            .store_coins(value)
            .store_ref(begin_cell().store_int(internal_value, 17).end_cell())
            .end_cell();
}

(cell) create_empty_message(int score, int value) {
    return begin_cell()
            .store_uint(score, 32)
            .store_coins(value)
            .store_ref(begin_cell().end_cell())
            .end_cell();
}

(cell) create_null_message(int score, int value) {
    return begin_cell()
            .store_uint(score, 32)
            .store_coins(value)
;;             .store_ref(null())
            .end_cell();
}

(cell) create_big_message(int score, int value, int internal_value) {
    return begin_cell()
            .store_uint(score, 32)
            .store_coins(value)
            .store_ref(begin_cell()
                    .store_uint(internal_value, 256).store_uint(0, 256).store_uint(0, 256).store_uint(0, 255)
                    .end_cell())
            .end_cell();
}

(int, int) parse_one_output_message(slice messages, int value, int internal_value) impure {
    ;; todo: understand, how is it stored.
    messages~load_ref();
    slice first_msg = messages~load_ref().begin_parse();

    first_msg~load_uint(6);
    first_msg~load_msg_addr();
    int actual_value = first_msg~load_coins();
    first_msg~load_uint(107);
    slice msg = first_msg~load_bits(17);
    int actual_internal_value = msg~load_int(17);

    throw_if(1000, actual_value != value);
    throw_if(1001, actual_internal_value != internal_value);
    return (actual_value, actual_internal_value);
}

(int, int, int, int) parse_two_output_messages(
        slice messages, int value1, int internal_value1, int value2, int internal_value2) impure {
    ;; todo: understand, how is it stored.
    messages~load_ref();
    slice first_msg = messages~load_ref().begin_parse();

    first_msg~load_uint(6);
    first_msg~load_msg_addr();
    int actual_value1 = first_msg~load_coins();
    first_msg~load_uint(107);
    slice msg = first_msg~load_bits(17);
    int actual_internal_value1 = msg~load_int(17);

    throw_if(1000, actual_value1 != value1);
    throw_if(1001, actual_internal_value1 != internal_value1);

    slice second_msg = messages~load_ref().begin_parse();

    second_msg~load_uint(6);
    second_msg~load_msg_addr();
    int actual_value2 = second_msg~load_coins();
    second_msg~load_uint(107);
    slice msg = second_msg~load_bits(17);
    int actual_internal_value2 = msg~load_int(17);

    throw_if(1000, actual_value2 != value2);
    throw_if(1001, actual_internal_value2 != internal_value2);

    return (actual_value1, actual_internal_value1, actual_value2, actual_internal_value2);
}

(int, int) parse_empty_output_message(slice messages, int value) impure {
    ;; todo: understand, how is it stored.
    messages~load_ref();
    slice first_msg = messages~load_ref().begin_parse();

    first_msg~load_uint(6);
    first_msg~load_msg_addr();
    int actual_value = first_msg~load_coins();
    first_msg~load_uint(107);
    int actual_bits = first_msg.slice_bits();

    throw_if(1000, actual_value != value);
    throw_if(1001, actual_bits != 0);
    return (actual_value, actual_bits);
}

_ __test_one_message() {
    ;; some message
    cell message = create_input_message(5, 10, -1);

    ;; When: recv_internal
    var (int gas_used, _) = invoke_method(recv_internal, [message.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(101, number != 1);

    int score = sl~load_uint(32);
    throw_if(102, score != 5);

    int value = sl~load_coins();
    throw_if(103, value != 10);

    int refs = sl.slice_refs();
    throw_if(104, refs != 1);

    slice msg = sl~load_ref().begin_parse();
    throw_if(105, msg.slice_empty?());

    return [gas_used, msg];
}

_ __test_two_messages() {
    ;; two messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);

    ;; When: recv_internal two times
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(110, number != 2);

    int score = sl~load_uint(32);
    throw_if(111, score != 1);
    int value = sl~load_coins();
    throw_if(112, value != 12);

    int score = sl~load_uint(32);
    throw_if(121, score != 2);
    int value = sl~load_coins();
    throw_if(122, value != 11);

    throw_unless(150, sl.slice_data_empty?());

    int refs = sl.slice_refs();
    throw_if(130, refs != 2);

    slice msg1 = sl~load_ref().begin_parse();
    throw_if(141, msg1.slice_empty?());
    slice msg2 = sl~load_ref().begin_parse();
    throw_if(142, msg2.slice_empty?());

    return [msg1, msg2];
}

_ __test_five_messages() {
    ;; four messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);
    cell message3 = create_input_message(3, 10, -3);
    cell message4 = create_input_message(4, 9, -4);
    cell message5 = create_input_message(5, 8, -5);

    ;; When: recv_internal two times
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();

    ;; Then: expected state
    slice sl = get_data().begin_parse();
    int number = sl~load_uint(4);
    throw_if(110, number != 5);

    int score = sl~load_uint(32);
    throw_if(111, score != 5);
    int value = sl~load_coins();
    throw_if(112, value != 8);

    slice n1 = sl~load_ref().begin_parse();
    slice msg5 = sl~load_ref().begin_parse();
    throw_unless(113, sl.slice_empty?());
    throw_if(114, msg5.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(121, score != 1);
    int value = n1~load_coins();
    throw_if(122, value != 12);
    slice msg1 = n1~load_ref().begin_parse();
    throw_if(123, msg1.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(131, score != 2);
    int value = n1~load_coins();
    throw_if(132, value != 11);
    slice msg2 = n1~load_ref().begin_parse();
    throw_if(133, msg2.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(141, score != 3);
    int value = n1~load_coins();
    throw_if(142, value != 10);
    slice msg3 = n1~load_ref().begin_parse();
    throw_if(143, msg3.slice_empty?());

    int score = n1~load_uint(32);
    throw_if(151, score != 4);
    int value = n1~load_coins();
    throw_if(152, value != 9);
    slice msg4 = n1~load_ref().begin_parse();
    throw_if(153, msg4.slice_empty?());

    throw_unless(200, n1.slice_data_empty?());

    return [msg1, msg2, msg3, msg4, msg5];
}

_ __test_twelve_messages_one_output() {
    ;; messages
    cell message1 = create_input_message(1, 12, -1);
    cell message2 = create_input_message(2, 11, -2);
    cell message3 = create_input_message(3, 10, -3);
    cell message4 = create_input_message(4, 9, -4);
    cell message5 = create_input_message(5, 8, -5);
    cell message6 = create_input_message(6, 7, -6);
    cell message7 = create_input_message(7, 6, -7);
    cell message8 = create_input_message(8, 5, -8);
    cell message9 = create_input_message(9, 4, -9);
    cell message10 = create_input_message(10, 3, -10);
    cell message11 = create_input_message(11, 2, -11);
    cell message12 = create_input_message(12, 1, -12);

    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out12 = get_actions();
    (int, int) actual = parse_one_output_message(out12, 1, -12);

    return [actual];
}

_ __test_twelve_messages_two_outputs() {
    ;; messages
    cell message1 = create_input_message(1, 1, -1);
    cell message2 = create_input_message(2, 2, -2);
    cell message3 = create_input_message(3, 3, -3);
    cell message4 = create_input_message(4, 4, -4);
    cell message5 = create_input_message(5, 5, -5);
    cell message6 = create_input_message(6, 6, -6);
    cell message7 = create_input_message(7, 7, -7);
    cell message8 = create_input_message(8, 8, -8);
    cell message9 = create_input_message(9, 9, -9);
    cell message10 = create_input_message(10, 10, -10);
    cell message11 = create_input_message(11, 11, -11);
    cell message12 = create_input_message(12, 12, -12);

    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out12 = get_actions();
    (int, int) actual = parse_one_output_message(out12, 1, -1); ;; only last (e.g. second) message is achiavable :(
;;     (int, int, int, int) actual = parse_two_output_messages(out12, 12, -12, 1, -1);

    return [actual];
}

_ __test_from_task_description() {
    ;; messages
    cell message1 = create_input_message(1, 5, -1);
    cell message2 = create_input_message(2, 6, -2);
    cell message3 = create_input_message(3, 100, -3);
    cell message4 = create_input_message(4, 2, -4);
    cell message5 = create_input_message(5, 3, -5);
    cell message6 = create_input_message(6, 4, -6);
    cell message7 = create_input_message(7, 7, -7);
    cell message8 = create_input_message(8, 8, -8);
    cell message9 = create_input_message(9, 9, -9);
    cell message10 = create_input_message(10, 10, -10);
    cell message11 = create_input_message(11, 11, -11);
    cell message12 = create_input_message(12, 20, -12); ;; (12,20); (4,2)
    cell message13 = create_input_message(15, 1, -13);
    cell message14 = create_input_message(13, 13, -14); ;; (15, 1)
    cell message15 = create_input_message(14, 14, -15); ;; (14,14); (5,3)

    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out12 = get_actions();
    (int, int) actual12 = parse_one_output_message(out12, 2, -4);
    var (_, _) = invoke_method(recv_internal, [message13.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message14.begin_parse()]);
    slice out14 = get_actions();
    (int, int) actual14 = parse_one_output_message(out14, 1, -13);
    var (_, _) = invoke_method(recv_internal, [message15.begin_parse()]);
    slice out15 = get_actions();
    (int, int) actual15 = parse_one_output_message(out15, 3, -5);

    return [actual12, actual14, actual15];
}

_ __test_36_messages() {
    ;; messages
    ;;                                    max  min
    cell message1  = create_input_message(101, 101,  -1);   ;; #11
    cell message2  = create_input_message(102, 102,  -2);   ;; #12
    cell message3  = create_input_message(103, 103,  -3);   ;; #13
    cell message4  = create_input_message(104, 104,  -4);   ;; #14
    cell message5  = create_input_message(105, 105,  -5);   ;; #21
    cell message6  = create_input_message(106, 106,  -6);   ;; #22
    cell message7  = create_input_message(107, 107,  -7);   ;; #23
    cell message8  = create_input_message(108, 108,  -8);   ;; #24
    cell message9  = create_input_message(109, 109,  -9);   ;; #31
    cell message10 = create_input_message(110, 110, -10);   ;; #32
    cell message11 = create_input_message(111, 111, -11);   ;; #33
    cell message12 = create_input_message(112, 112, -12);   ;; #34 -> out #34 (112, -12); #11 (101,  -1)
    ;; dozen 1
    cell message13 = create_input_message( 99, 113, -13);   ;; #11
    cell message14 = create_input_message( 98, 114, -14);   ;; #34 -> out #33 (111, -11); #12 (102,  -2)
    cell message15 = create_input_message( 97, 115, -15);   ;; #12
    cell message16 = create_input_message( 96, 116, -16);   ;; #33 -> out #32 (110, -10); #13 (103,  -3)
    cell message17 = create_input_message( 95, 117, -17);   ;; #13
    cell message18 = create_input_message( 94, 118, -18);   ;; #32 -> out #31 (109, -9); #14 (104,  -4)
    cell message19 = create_input_message( 93, 119, -19);   ;; #14
    cell message20 = create_input_message( 92, 120, -20);   ;; #31 -> out #24 (108, -8); #21 (105,  -5)
    cell message21 = create_input_message( 91, 121, -21);   ;; #21
    cell message22 = create_input_message( 90, 122, -22);   ;; #24 -> out #23 (107, -7); #22 (106,  -6)
    cell message23 = create_input_message( 89, 123, -23);   ;; #22
    cell message24 = create_input_message( 88, 124, -24);   ;; #23 -> out #11 (113, -13)
    ;; dozen 2
    cell message25 = create_input_message( 87, 125, -25);   ;; #11 -> out #34 (114, -14)
    cell message26 = create_input_message( 86, 126, -26);   ;; #34 -> out #12 (115, -15)
    cell message27 = create_input_message( 85, 127, -27);   ;; #12 -> out #33 (116, -16)
    cell message28 = create_input_message( 84, 128, -28);   ;; #33 -> out #13 (117, -17)
    cell message29 = create_input_message( 83, 129, -29);   ;; #13 -> out #32 (118, -18)
    cell message30 = create_input_message( 82, 130, -30);   ;; #32 -> out #14 (119, -19)
    cell message31 = create_input_message( 81, 131, -31);   ;; #14 -> out #31 (120, -20)
    cell message32 = create_input_message( 80, 132, -32);   ;; #31 -> out #21 (121, -21)
    cell message33 = create_input_message( 79, 133, -33);   ;; #21 -> out #24 (122, -22)
    cell message34 = create_input_message( 78, 134, -34);   ;; #24 -> out #22 (123, -23)
    cell message35 = create_input_message( 77, 135, -35);   ;; #22 -> out #23 (124, -24)
    cell message36 = create_input_message( 76, 136, -36);   ;; #23 -> out #11 (125, -25)
    ;; dozen 3


    ;; When: recv_internal
    var (_, _) = invoke_method(recv_internal, [message1.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message2.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message3.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message4.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message5.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message6.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message7.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message8.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message9.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message10.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message11.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message12.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 101, -1);
    var (_, _) = invoke_method(recv_internal, [message13.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message14.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 102, -2);
    var (_, _) = invoke_method(recv_internal, [message15.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message16.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 103, -3);
    var (_, _) = invoke_method(recv_internal, [message17.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message18.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 104, -4);
    var (_, _) = invoke_method(recv_internal, [message19.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message20.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 105, -5);
    var (_, _) = invoke_method(recv_internal, [message21.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message22.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 106, -6);
    var (_, _) = invoke_method(recv_internal, [message23.begin_parse()]);
    assert_no_actions();
    var (_, _) = invoke_method(recv_internal, [message24.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 113, -13);
    var (_, _) = invoke_method(recv_internal, [message25.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 114, -14);
    var (_, _) = invoke_method(recv_internal, [message26.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 115, -15);
    var (_, _) = invoke_method(recv_internal, [message27.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 116, -16);
    var (_, _) = invoke_method(recv_internal, [message28.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 117, -17);
    var (_, _) = invoke_method(recv_internal, [message29.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 118, -18);
    var (_, _) = invoke_method(recv_internal, [message30.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 119, -19);
    var (_, _) = invoke_method(recv_internal, [message31.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 120, -20);
    var (_, _) = invoke_method(recv_internal, [message32.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 121, -21);
    var (_, _) = invoke_method(recv_internal, [message33.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 122, -22);
    var (_, _) = invoke_method(recv_internal, [message34.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 123, -23);
    var (_, _) = invoke_method(recv_internal, [message35.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 124, -24);
    var (_, _) = invoke_method(recv_internal, [message36.begin_parse()]);
    slice out = get_actions();
    (int, int) actual = parse_one_output_message(out, 125, -25);

    return [actual];
}

_ __test_1000_messages_one_output() {
    ;; messages
    int total = 1000;
    int num = 0;
    repeat(1000) {
        cell message = create_input_message(total - num - 1, num, - num);
        var (_, _) = invoke_method(recv_internal, [message.begin_parse()]);
        if (num < 11) {
            assert_no_actions();
        } else {
            slice out = get_actions();
            (int, int) actual = parse_one_output_message(out, num - 11, - num + 11);
        }
        num += 1;
    }

    return ();
}

_ __test_1000_messages_two_outputs() {
    ;; messages
    int total = 1000;
    int num = 0;
    repeat(1000) {
        cell message = create_input_message(num, num, - num);
        var (_, _) = invoke_method(recv_internal, [message.begin_parse()]);
        if (num < 11) {
            assert_no_actions();
        } else {
            if (num % 2 == 0) {
                assert_no_actions();
            } else {
                slice out = get_actions();
                if (num < 33) {
                    (int, int) actual = parse_one_output_message(out, (num - 11) / 2, - (num - 11) / 2);
                } else {
                    (int, int) actual = parse_one_output_message(out, (num - 21), - (num - 21));
                }
            }
        }
        num += 1;
    }

    return ();
}

_ __test_1000_messages_random() {
    int total = 1000;
    int num = 0;
    repeat(1000) {
        cell message = create_input_message(rand(4294967295), rand(65535), - num);
        var (_, _) = invoke_method(recv_internal, [message.begin_parse()]);
        num += 1;
    }

    return ();
}

_ __test_empty_null_message_one_output() {
    int total = 36;
    int num = 0;
    repeat(total) {
        cell message = null();
        if (num % 2 == 0) {
            message = create_empty_message(total - num - 1, num);
        } else {
            message = create_null_message(total - num - 1, num);
        }
        var (_, _) = invoke_method(recv_internal, [message.begin_parse()]);
        if (num < 11) {
            assert_no_actions();
        } else {
            slice out = get_actions();
            (int, int) actual = parse_empty_output_message(out, num - 11);
        }
        num += 1;
    }

    return ();
}

_ __test_empty_null_message_two_outputs() {
    int total = 36;
    int num = 0;
    repeat(total) {
        cell message = null();
        if (num % 2 == 0) {
            message = create_empty_message(num, num);
        } else {
            message = create_null_message(num, num);
        }
        var (_, _) = invoke_method(recv_internal, [message.begin_parse()]);
        if (num < 11) {
            assert_no_actions();
        } else {
            if (num % 2 == 0) {
                assert_no_actions();
            } else {
                slice out = get_actions();
                if (num < 33) {
                    (int, int) actual = parse_empty_output_message(out, (num - 11) / 2);
                } else {
                    (int, int) actual = parse_empty_output_message(out, (num - 21));
                }
            }
        }
        num += 1;
    }

    return ();
}
